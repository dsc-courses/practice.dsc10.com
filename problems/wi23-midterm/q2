# BEGIN PROB

# BEGIN SUBPROB

The `"Date"` column stores the year, month, and day together in a single 8-digit `int`. The first
four digits represent the year, the next two represent the month, and the last two represent
the day. For example, 19500812 corresponds to August 12, 1950.
The `get month` function below takes as input one such 8-digit `int`, and returns the month
only, as an int. For example, `get month`(19500812) evaluates to 8.

```py
def get_month(date):
    return int((date % 10000) / 100)
```

Similarily, the `get year` and `get day` functions below should each take as input an 8-digit int
representing a date, and return an int representing the year and day, respectively. Choose
the correct code to fill in the blanks.

```py
def get_year(date)::
    return ____(a)____
```

```py
def get_day(date):
    return ____(b)____
```

What goes in blank (a)?
( ) `date / 10000`
( ) `int(date / 10000)`
( ) `int(date % 10000)`
( ) `int((date % 10000) / 10000)`

# BEGIN SOLUTION

**Answer:** int(date/10000)

Take 19500812 as an example. `get_year` asks us to find the year, \frac{19500812}{10000}=1950 with a remainder of 812. The `int` keeps only the integer part (in this case 1950), and removes the fraction (\frac{812}{10000}).


# END SOLUTION

# END SUBPROB



# BEGIN SUBPROB

What goes in blank (b)?
( ) `int(date / 100)`
( ) `int(date / 1000000)`
( ) `int((date % 100) / 10000)`
( ) `date % 100`

**Important!** For the rest of the exam, assume those three functions have been implemented
correctly and the following code has been run to assign three new columns to `storms`.

```py
storms = storms.assign(Year = storms.get("Date").apply(get_year),
                       Month = storms.get("Date").apply(get_month),
                       Day = storms.get("Date").apply(get_day))
```

# BEGIN SOLUTION

**Answer:** date % 100

Recall that `%` is the operation that allows us to find the remainder. Again, take 19500812 as an example. `get_day` asks us to find the date, \frac{19500812}{100}=195008 with a remainder of 12. Thus, the function `get_day` returns the remainder, helping us to find the day. 

# END SOLUTION

# END SUBPROB

# END PROB

